---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    grid: {sidebar-width: 500px, body-width: 2500px, margin-width: 500px}
    output-file: explore.html
    include-in-header: {text: <link rel = "icon" href = "notebooks/favicon.ico" />}
code-block-background: true
fontsize: 0.9em
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="explore_files/md-default0.js" type="text/javascript"></script><script src="explore_files/md-default1.js" type="text/javascript"></script><script src="explore_files/plotly2.js" type="text/javascript"></script>

# Noj prompts proof-of-concept

This is a small experiment demonstrating how we can generate
a relevant prompt by picking relevant tasks of a catalogue,
and then use it for basic data processing and visualization tasks.

The notebook was generated by rewriting `"CLAUDE.md"` with
the concatenation of relevant retrieved prompts, and then
gradually adding tasks like `"@claude please ..."`,
which are invoked by typing `"handle notebooks/explore.clj"`
at the Claude Code prompt.


## Setup


::: {.sourceClojure}
```clojure
(ns explore
  (:require
   [scicloj.kindly.v4.kind :as kind]
   [scicloj.prompts.v1.api :as prompts]
   [tablecloth.api :as tc]
   [scicloj.tableplot.v1.plotly :as plotly]
   [scicloj.metamorph.ml.rdatasets :as rdatasets]))
```
:::



## The data

We wish to analyse the following dataset of economic time-series:


::: {.sourceClojure}
```clojure
(def economics
  (rdatasets/ggplot2-economics_long))
```
:::


source: [ggplot2-economics_long](https://vincentarelbundock.github.io/Rdatasets/doc/ggplot2/economics_long.html) at [Rdatasets](https://vincentarelbundock.github.io/Rdatasets/articles/data.html)


## Preparing the prompt

Let us explore the catalogue of relevant prompts.


::: {.sourceClojure}
```clojure
(prompts/catalogue)
```
:::



::: {.printedClojure}
```clojure
{:prompts
 {"joining-datasets.md"
  {:description "Joining and combining datasets in various ways",
   :tags #{:combine-datasets :join-datasets :merge-data},
   :last-modified "2025-05-20"},
  "time-series-visualization.md"
  {:description
   "Visualizing time series data with interactive features",
   :tags #{:visualize-time-series :analyze-temporal :plot-trends},
   :last-modified "2025-05-20"},
  "noise-generation.md"
  {:description
   "Generating various types of noise for procedural generation",
   :tags #{:create-fractal :generate-noise :simulate-terrain},
   :last-modified "2025-05-20"},
  "column-operations.md"
  {:description "Adding, updating, and manipulating dataset columns",
   :tags #{:add-column :update-column :drop-column :rename-column},
   :last-modified "2025-05-20"},
  "sequence-generation.md"
  {:description "Generating random and quasi-random sequences",
   :tags #{:sample-space :create-low-discrepancy :generate-sequence},
   :last-modified "2025-05-20"},
  "random-sampling-techniques.md"
  {:description "Advanced random sampling techniques and utilities",
   :tags #{:sample-randomly :shuffle-collection :weight-samples},
   :last-modified "2025-05-20"},
  "creating-datasets.md"
  {:description
   "Creating datasets from various data sources with Tablecloth",
   :tags #{:load-data :define-dataset :create-dataset},
   :last-modified "2025-05-20"},
  "basic-random-generation.md"
  {:description "Basic random number generation with fastmath.random",
   :tags #{:seed-random :generate-random :create-rng},
   :last-modified "2025-05-20"},
  "data-visualization-plotly.md"
  {:description
   "Creating interactive data visualizations with Tableplot's Plotly API",
   :tags #{:create-visualization :customize-plot :build-chart},
   :last-modified "2025-05-20"},
  "geo-spatial-visualization.md"
  {:description "Visualizing geo-spatial data on interactive maps",
   :tags #{:plot-spatial :create-map :visualize-geographic},
   :last-modified "2025-05-20"},
  "filtering-rows.md"
  {:description "Filtering and selecting rows from datasets",
   :tags #{:select-rows :filter-rows :drop-rows},
   :last-modified "2025-05-20"},
  "grouping-aggregating.md"
  {:description "Grouping datasets and performing aggregations",
   :tags #{:aggregate-data :calculate-statistics :group-data},
   :last-modified "2025-05-20"},
  "distribution-sampling.md"
  {:description
   "Sampling from statistical distributions with fastmath.random",
   :tags
   #{:sample-distribution :calculate-probability :generate-samples},
   :last-modified "2025-05-20"},
  "statistical-visualization.md"
  {:description
   "Creating statistical plots for data analysis and exploration",
   :tags
   #{:visualize-statistics :analyze-distribution :show-correlation},
   :last-modified "2025-05-20"}}}

```
:::


You see, it is an annotated collection of Markdown files
(which are the prompts themselves).

More specifically, let us explore all supported tasks:


::: {.sourceClojure}
```clojure
(prompts/all-tags)
```
:::



::: {.printedClojure}
```clojure
(:add-column
 :aggregate-data
 :analyze-distribution
 :analyze-temporal
 :build-chart
 :calculate-probability
 :calculate-statistics
 :combine-datasets
 :create-dataset
 :create-fractal
 :create-low-discrepancy
 :create-map
 :create-rng
 :create-visualization
 :customize-plot
 :define-dataset
 :drop-column
 :drop-rows
 :filter-rows
 :generate-noise
 :generate-random
 :generate-samples
 :generate-sequence
 :group-data
 :join-datasets
 :load-data
 :merge-data
 :plot-spatial
 :plot-trends
 :rename-column
 :sample-distribution
 :sample-randomly
 :sample-space
 :seed-random
 :select-rows
 :show-correlation
 :shuffle-collection
 :simulate-terrain
 :update-column
 :visualize-geographic
 :visualize-statistics
 :visualize-time-series
 :weight-samples)

```
:::


Let us generate a prompt for the tasks which are relevant
to this notebook.
It is created by concatenating the relevant prompts from the
catalogue (along with a tiny base prompt).


::: {.sourceClojure}
```clojure
(->> [:creating-datasets :plot-trends :aggregate-data]
     (prompts/generate-prompt)
     (spit "CLAUDE.md"))
```
:::



::: {.printedClojure}
```clojure
nil

```
:::


Here is the prompt we just prepared:


::: {.sourceClojure}
```clojure
(kind/hiccup
 [:div {:style {:height "400px"
                :overflow-y "scroll"
                :background-color "floralwhite"}}
  (kind/md
   (slurp "CLAUDE.md"))])
```
:::



```{=html}
<div style="background-color:floralwhite;height:400px;overflow-y:scroll;"><div><h1 id="general-guidelines">General guidelines</h1><p>When handling requests in code, please do not erase the text of the request. In other words, please keep the paragraphs beginning with "@claude". Your role is only to add code, not change or erase anything.</p><h1 id="time-series-visualization-with-tableplot">Time Series Visualization with Tableplot</h1><h2 id="purpose">Purpose</h2><p>This prompt focuses specifically on visualizing time series data using Tableplot's Plotly API.</p><h2 id="setup">Setup</h2><pre class="viewer-code not-prose">(require '[scicloj.tableplot.v1.plotly :as plotly])
(require '[scicloj.tablecloth.api :as tc])
(require '[java-time :as jt])
</pre><h2 id="basic-time-series-plot">Basic Time Series Plot</h2><pre class="viewer-code not-prose">;; Sample time series data
(def time-data (tc/dataset {:date (map #(jt/local-date 2025 1 %) (range 1 31))
                            :value (map #(+ 100 (* 10 (Math/sin (/ % 3.0)))) (range 30))
                            :category (repeatedly 30 #(rand-nth ["A" "B" "C"]))}))

;; Basic time series line plot
(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"}}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
</pre><h2 id="time-series-with-date-range-selector">Time Series with Date Range Selector</h2><pre class="viewer-code not-prose">(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"
                                    :rangeselector {:buttons [
                                                    {:count 7 :label "1w" :step "day" :stepmode "backward"}
                                                    {:count 14 :label "2w" :step "day" :stepmode "backward"}
                                                    {:step "all"}]}}
                           :title "Time Series with Range Selector"}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
</pre><h2 id="time-series-with-range-slider">Time Series with Range Slider</h2><pre class="viewer-code not-prose">(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"
                                    :rangeslider {:visible true}}
                           :title "Time Series with Range Slider"}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
</pre><h2 id="multiple-time-series-by-category">Multiple Time Series by Category</h2><pre class="viewer-code not-prose">(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"}}})
    (plotly/layer-line {:=x :date :=y :value :=color :category})
    (plotly/plot))
</pre><h2 id="filled-time-series-(area-chart)">Filled Time Series (Area Chart)</h2><pre class="viewer-code not-prose">(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"}}})
    (plotly/layer-area {:=x :date :=y :value :=color :category})
    (plotly/plot))
</pre><h2 id="candlestick-chart-for-financial-data">Candlestick Chart for Financial Data</h2><pre class="viewer-code not-prose">;; Sample financial data
(def financial-data 
  (tc/dataset {:date (map #(jt/local-date 2025 1 %) (range 1 31))
               :open (repeatedly 30 #(+ 100 (rand 10)))
               :high (repeatedly 30 #(+ 105 (rand 10)))
               :low (repeatedly 30 #(+ 95 (rand 10)))
               :close (repeatedly 30 #(+ 100 (rand 10)))}))

;; Candlestick chart
(-> financial-data
    (plotly/base {:=layout {:xaxis {:type "date"}
                           :title "Stock Price"}})
    (plotly/layer-candlestick {:=x :date
                              :=open :open
                              :=high :high
                              :=low :low
                              :=close :close})
    (plotly/plot))
</pre><h2 id="time-series-with-annotations">Time Series with Annotations</h2><pre class="viewer-code not-prose">;; Define important events
(def events [{:date (jt/local-date 2025 1 5) :event "Product Launch"}
            {:date (jt/local-date 2025 1 15) :event "Quarterly Report"}
            {:date (jt/local-date 2025 1 25) :event "Conference"}])

;; Create annotations for the events
(def annotations
  (mapv (fn [{:keys [date event]}]
          (let [y-val (+ 100 (* 10 (Math/sin (/ (.getDayOfMonth date) 3.0))))]
            {:x date
             :y y-val
             :xref "x"
             :yref "y"
             :text event
             :showarrow true
             :arrowhead 2
             :arrowsize 1
             :arrowwidth 1
             :ax 0
             :ay -40}))
        events))

;; Plot with annotations
(-> time-data
    (plotly/base {:=layout {:xaxis {:type "date"}
                           :annotations annotations
                           :title "Time Series with Event Annotations"}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
</pre><h2 id="time-series-heatmap-calendar">Time Series Heatmap Calendar</h2><pre class="viewer-code not-prose">;; Generate a year of daily data
(def calendar-data
  (let [dates (map #(jt/local-date 2025 (inc (quot % 31)) (inc (rem % 31))) (range 365))
        values (map #(+ 50 (* 30 (Math/sin (/ % 30.0)))) (range 365))]
    (tc/dataset {:date dates
                 :value values
                 :day (map #(.getDayOfMonth %) dates)
                 :month (map #(.getMonthValue %) dates)
                 :weekday (map #(.getValue (.getDayOfWeek %)) dates)})))

;; Create a calendar heatmap
(-> calendar-data
    (plotly/base {:=layout {:title "Calendar Heatmap"}})
    (plotly/layer-heatmap {:=x :day
                          :=y :month
                          :=z :value
                          :=color-scale "Viridis"})
    (plotly/plot))
</pre><h2 id="time-series-decomposition">Time Series Decomposition</h2><pre class="viewer-code not-prose">;; Generate time series with trend, seasonality, and noise
(def decomp-data
  (let [dates (map #(jt/local-date 2025 (inc (quot % 30)) (inc (rem % 30))) (range 365))
        trend (map #(+ 100 (* 0.1 %)) (range 365))
        seasonality (map #(* 15 (Math/sin (/ % 30.0))) (range 365))
        noise (repeatedly 365 #(* 5 (- (rand) 0.5)))
        values (map + trend seasonality noise)]
    (tc/dataset {:date dates
                 :value values
                 :trend trend
                 :seasonality seasonality
                 :noise noise})))

;; Plot the decomposition
(-> decomp-data
    (plotly/base {:=layout {:title "Time Series Decomposition"
                           :grid {:rows 4 :columns 1 :pattern "independent"}
                           :height 800}})
    (plotly/layer-line {:=x :date :=y :value :=name "Original" :=subplot 1})
    (plotly/layer-line {:=x :date :=y :trend :=name "Trend" :=subplot 2})
    (plotly/layer-line {:=x :date :=y :seasonality :=name "Seasonality" :=subplot 3})
    (plotly/layer-line {:=x :date :=y :noise :=name "Residual" :=subplot 4})
    (plotly/plot))
</pre><h2 id="multiple-time-series-with-synchronized-axes">Multiple Time Series with Synchronized Axes</h2><pre class="viewer-code not-prose">;; Multiple metrics
(def multi-metric-data
  (tc/dataset {:date (map #(jt/local-date 2025 1 %) (range 1 31))
               :revenue (map #(+ 1000 (* 100 (Math/sin (/ % 5.0)))) (range 30))
               :customers (map #(+ 500 (* 50 (Math/cos (/ % 7.0)))) (range 30))
               :profit (map #(+ 300 (* 30 (Math/sin (/ % 3.0)))) (range 30))}))

;; Synchronized subplots
(-> multi-metric-data
    (plotly/base {:=layout {:title "Business Metrics"
                           :grid {:rows 3 :columns 1 :pattern "independent" :roworder "top to bottom"}
                           :height 800
                           :xaxis {:type "date"}
                           :xaxis2 {:type "date"}
                           :xaxis3 {:type "date"}}})
    (plotly/layer-line {:=x :date :=y :revenue :=name "Revenue" :=subplot 1})
    (plotly/layer-line {:=x :date :=y :customers :=name "Customers" :=subplot 2})
    (plotly/layer-line {:=x :date :=y :profit :=name "Profit" :=subplot 3})
    (plotly/plot))
</pre><h2 id="time-series-forecasting-visualization">Time Series Forecasting Visualization</h2><pre class="viewer-code not-prose">;; Historical and forecast data
(def forecast-data
  (let [dates (concat 
               (map #(jt/local-date 2025 1 %) (range 1 31))
               (map #(jt/local-date 2025 2 %) (range 1 15)))
        historical (take 30 dates)
        forecast (drop 30 dates)
        hist-values (map #(+ 100 (* 10 (Math/sin (/ % 7.0)))) (range 30))
        forecast-values (map #(+ 100 (* 10 (Math/sin (/ (+ % 30) 7.0)))) (range 14))
        confidence-low (map #(- % 15) forecast-values)
        confidence-high (map #(+ % 15) forecast-values)]
    (tc/dataset {:date (concat historical forecast)
                 :value (concat hist-values (repeat 14 nil))
                 :forecast (concat (repeat 30 nil) forecast-values)
                 :conf-low (concat (repeat 30 nil) confidence-low)
                 :conf-high (concat (repeat 30 nil) confidence-high)
                 :is-forecast (concat (repeat 30 false) (repeat 14 true))})))

;; Visualize forecast with confidence interval
(-> forecast-data
    (plotly/base {:=layout {:title "Time Series Forecast"
                           :xaxis {:type "date"}
                           :shapes [{:type "rect"
                                    :xref "x"
                                    :yref "paper"
                                    :x0 (jt/local-date 2025 1 31)
                                    :y0 0
                                    :x1 (jt/local-date 2025 2 15)
                                    :y1 1
                                    :fillcolor "#f8f9fa"
                                    :opacity 0.3
                                    :line {:width 0}}]}})
    (plotly/layer-line {:=x :date :=y :value :=name "Historical" :=mark-width 2})
    (plotly/layer-line {:=x :date :=y :forecast :=name "Forecast" :=mark-width 2 :=mark-dash "dash"})
    (plotly/layer-ribbon {:=x :date :=y-min :conf-low :=y-max :conf-high 
                          :=name "Confidence Interval" :=mark-opacity 0.2})
    (plotly/plot))
</pre><h2 id="tips-for-time-series-visualization">Tips for Time Series Visualization</h2><ul><li>Always specify <code>{:xaxis {:type "date"}}</code> in the layout for proper date handling</li><li>Use range selectors and sliders for interactive exploration of long time series</li><li>Consider synchronized subplots for multiple related time series</li><li>Add annotations to highlight important events</li><li>Use different chart types based on the data pattern:<ul><li>Line charts for general trends</li><li>Area charts for cumulative values</li><li>Candlestick charts for OHLC financial data</li></ul></li><li>For forecasting visualization, clearly distinguish historical vs. predicted data</li><li>Use confidence intervals to show prediction uncertainty</li></ul><h1 id="grouping-and-aggregating-data-with-tablecloth">Grouping and Aggregating Data with Tablecloth</h1><h2 id="purpose-2">Purpose</h2><p>This prompt demonstrates how to group datasets and perform aggregations using Tablecloth.</p><h2 id="setup-2">Setup</h2><pre class="viewer-code not-prose">(require '[tablecloth.api :as tc])

;; Sample dataset for examples
(def DS (tc/dataset {:V1 [1 2 1 3 2]
                     :V2 [10 20 30 40 50]
                     :V3 [0.1 0.2 0.3 0.4 0.5]
                     :V4 ["A" "B" "A" "C" "B"]}))
</pre><h2 id="grouping-data">Grouping Data</h2><h3 id="group-by-single-column">Group by Single Column</h3><pre class="viewer-code not-prose">(tc/group-by DS :V1)
</pre><h3 id="group-by-multiple-columns">Group by Multiple Columns</h3><pre class="viewer-code not-prose">(tc/group-by DS [:V1 :V4])
</pre><h3 id="access-groups">Access Groups</h3><pre class="viewer-code not-prose">;; Get first group
(-> DS
    (tc/group-by :V1)
    (tc/select-rows 0))

;; Get values for a specific group
(->> DS
     (tc/group-by :V1)
     (filter #(= 1 (:V1 (:name %)))))
</pre><h3 id="ungrouping">Ungrouping</h3><pre class="viewer-code not-prose">(->> DS
     (tc/group-by :V1)
     (tc/ungroup))
</pre><h2 id="aggregating-data">Aggregating Data</h2><h3 id="simple-aggregation">Simple Aggregation</h3><pre class="viewer-code not-prose">;; Sum one column
(tc/aggregate DS #(reduce + (% :V2)))
</pre><h3 id="named-aggregations">Named Aggregations</h3><pre class="viewer-code not-prose">(tc/aggregate DS {:sum-of-V2 #(reduce + (% :V2))
                  :mean-of-V3 #(/ (reduce + (% :V3)) (count (% :V3)))})
</pre><h3 id="group-and-aggregate">Group and Aggregate</h3><pre class="viewer-code not-prose">;; Group and apply single aggregation
(->> DS
     (tc/group-by :V4)
     (tc/aggregate #(reduce + (% :V2))))

;; Multiple aggregations with names
(->> DS
     (tc/group-by [:V4])
     (tc/aggregate {:sum-v1 #(reduce + (% :V1))
                    :prod-v3 #(reduce * (% :V3))
                    :count #(count (% :V1))}))
</pre><h3 id="common-aggregation-functions">Common Aggregation Functions</h3><pre class="viewer-code not-prose">(require '[tech.v3.datatype.functional :as dfn])

(->> DS
     (tc/group-by :V4)
     (tc/aggregate {:count count
                    :sum-v2 #(dfn/sum (% :V2))
                    :mean-v2 #(dfn/mean (% :V2))
                    :min-v2 #(dfn/min (% :V2))
                    :max-v2 #(dfn/max (% :V2))
                    :std-v2 #(dfn/standard-deviation (% :V2))}))
</pre><h2 id="tips">Tips</h2><ul><li>Grouped datasets retain all columns in each group</li><li>Use tech.v3.datatype.functional for efficient numeric operations</li><li>Combine aggregations with other operations for complex analysis</li><li>Groups are named by their grouping values</li></ul></div></div>
```



## Exploration

@claude please show a few rows of the economics dataset.


::: {.sourceClojure}
```clojure
(tc/head economics 10)
```
:::


::: {.clay-dataset}
https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/economics_long.csv [10 5]:

| :rownames |      :date | :variable | :value |  :value-01 |
|----------:|------------|-----------|-------:|-----------:|
|         1 | 1967-07-01 |       pce |  506.7 | 0.00000000 |
|         2 | 1967-08-01 |       pce |  509.8 | 0.00026525 |
|         3 | 1967-09-01 |       pce |  515.6 | 0.00076152 |
|         4 | 1967-10-01 |       pce |  512.2 | 0.00047060 |
|         5 | 1967-11-01 |       pce |  517.4 | 0.00091554 |
|         6 | 1967-12-01 |       pce |  525.1 | 0.00157439 |
|         7 | 1968-01-01 |       pce |  530.9 | 0.00207066 |
|         8 | 1968-02-01 |       pce |  533.6 | 0.00230168 |
|         9 | 1968-03-01 |       pce |  544.3 | 0.00321722 |
|        10 | 1968-04-01 |       pce |  544.0 | 0.00319155 |


:::


@claude pleaes show the distinct values of `:variable` and their counts.


::: {.sourceClojure}
```clojure
(-> economics
    (tc/group-by :variable)
    (tc/aggregate {:count tc/row-count}))
```
:::


::: {.clay-dataset}
_unnamed [5 2]:

| :$group-name | :count |
|--------------|-------:|
|          pce |    574 |
|          pop |    574 |
|      psavert |    574 |
|      uempmed |    574 |
|     unemploy |    574 |


:::


@claude please define a new dataset that only includes
the cases where `:variable` is `"unemploy"`.


::: {.sourceClojure}
```clojure
(def unemploy-data
  (tc/select-rows economics #(= "unemploy" (:variable %))))
```
:::


@claude please plot the time series of unemployment data.


::: {.sourceClojure}
```clojure
(-> unemploy-data
    (plotly/base {:=layout {:xaxis {:type "date"}
                            :title "US Unemployment Over Time"}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
```
:::



```{=html}
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2944.0,2945.0,2958.0,3143.0,3066.0,3018.0,2878.0,3001.0,2877.0,2709.0,2740.0,2938.0,2883.0,2768.0,2686.0,2689.0,2715.0,2685.0,2718.0,2692.0,2712.0,2758.0,2713.0,2816.0,2868.0,2856.0,3040.0,3049.0,2856.0,2884.0,3201.0,3453.0,3635.0,3797.0,3919.0,4071.0,4175.0,4256.0,4456.0,4591.0,4898.0,5076.0,4986.0,4903.0,4987.0,4959.0,4996.0,4949.0,5035.0,5134.0,5042.0,4954.0,5161.0,5154.0,5019.0,4928.0,5038.0,4959.0,4922.0,4923.0,4913.0,4939.0,4849.0,4875.0,4602.0,4543.0,4326.0,4452.0,4394.0,4459.0,4329.0,4363.0,4305.0,4305.0,4350.0,4144.0,4396.0,4489.0,4644.0,4731.0,4634.0,4618.0,4705.0,4927.0,5063.0,5022.0,5437.0,5523.0,6140.0,6636.0,7501.0,7520.0,7978.0,8210.0,8433.0,8220.0,8127.0,7928.0,7923.0,7897.0,7794.0,7744.0,7534.0,7326.0,7230.0,7330.0,7053.0,7322.0,7490.0,7518.0,7380.0,7430.0,7620.0,7545.0,7280.0,7443.0,7307.0,7059.0,6911.0,7134.0,6829.0,6925.0,6751.0,6763.0,6815.0,6386.0,6489.0,6318.0,6337.0,6180.0,6127.0,6028.0,6309.0,6080.0,6125.0,5947.0,6077.0,6228.0,6109.0,6173.0,6109.0,6069.0,5840.0,5959.0,5996.0,6320.0,6190.0,6296.0,6238.0,6325.0,6683.0,6702.0,6729.0,7358.0,7984.0,8098.0,8363.0,8281.0,8021.0,8088.0,8023.0,7718.0,8071.0,8051.0,7982.0,7869.0,8174.0,8098.0,7863.0,8036.0,8230.0,8646.0,9029.0,9267.0,9397.0,9705.0,9895.0,10244.0,10335.0,10538.0,10849.0,10881.0,11217.0,11529.0,11938.0,12051.0,11534.0,11545.0,11408.0,11268.0,11154.0,11246.0,10548.0,10623.0,10282.0,9887.0,9499.0,9331.0,9008.0,8791.0,8746.0,8762.0,8456.0,8226.0,8537.0,8519.0,8367.0,8381.0,8198.0,8358.0,8423.0,8321.0,8339.0,8395.0,8302.0,8460.0,8513.0,8196.0,8248.0,8298.0,8128.0,8138.0,7795.0,8402.0,8383.0,8364.0,8439.0,8508.0,8319.0,8135.0,8310.0,8243.0,8159.0,7883.0,7892.0,7865.0,7862.0,7542.0,7574.0,7398.0,7268.0,7261.0,7102.0,7227.0,7035.0,6936.0,6953.0,6929.0,6876.0,6601.0,6779.0,6546.0,6605.0,6843.0,6604.0,6568.0,6537.0,6518.0,6682.0,6359.0,6205.0,6468.0,6375.0,6577.0,6495.0,6511.0,6590.0,6630.0,6725.0,6667.0,6752.0,6651.0,6598.0,6797.0,6742.0,6590.0,6922.0,7188.0,7368.0,7459.0,7764.0,7901.0,8015.0,8265.0,8586.0,8439.0,8736.0,8692.0,8586.0,8666.0,8722.0,8842.0,8931.0,9198.0,9283.0,9454.0,9460.0,9415.0,9744.0,10040.0,9850.0,9787.0,9781.0,9398.0,9565.0,9557.0,9325.0,9183.0,9056.0,9110.0,9149.0,9121.0,8930.0,8763.0,8714.0,8750.0,8542.0,8477.0,8630.0,8583.0,8470.0,8331.0,7915.0,7927.0,7946.0,7933.0,7734.0,7632.0,7375.0,7230.0,7375.0,7187.0,7153.0,7645.0,7430.0,7427.0,7527.0,7484.0,7478.0,7328.0,7426.0,7423.0,7491.0,7313.0,7318.0,7415.0,7423.0,7095.0,7337.0,6882.0,6979.0,7031.0,7236.0,7253.0,7158.0,7102.0,7000.0,6873.0,6655.0,6799.0,6655.0,6608.0,6656.0,6454.0,6308.0,6476.0,6368.0,6306.0,6422.0,5941.0,6047.0,6212.0,6259.0,6179.0,6300.0,6280.0,6100.0,6032.0,5976.0,6111.0,5783.0,6004.0,5796.0,5951.0,6025.0,5838.0,5915.0,5778.0,5716.0,5653.0,5708.0,5858.0,5733.0,5481.0,5758.0,5651.0,5747.0,5853.0,5625.0,5534.0,5639.0,5634.0,6023.0,6089.0,6141.0,6271.0,6226.0,6484.0,6583.0,7042.0,7142.0,7694.0,8003.0,8258.0,8182.0,8215.0,8304.0,8599.0,8399.0,8393.0,8390.0,8304.0,8251.0,8307.0,8520.0,8640.0,8520.0,8618.0,8588.0,8842.0,8957.0,9266.0,9011.0,8896.0,8921.0,8732.0,8576.0,8317.0,8370.0,8167.0,8491.0,8170.0,8212.0,8286.0,8136.0,7990.0,7927.0,8061.0,7932.0,7934.0,7784.0,7980.0,7737.0,7672.0,7651.0,7524.0,7406.0,7345.0,7553.0,7453.0,7566.0,7279.0,7064.0,7184.0,7072.0,7120.0,6980.0,7001.0,7175.0,7091.0,6847.0,6727.0,6872.0,6762.0,7116.0,6927.0,6731.0,6850.0,6766.0,6979.0,7149.0,7067.0,7170.0,7237.0,7240.0,7645.0,7685.0,7497.0,7822.0,7637.0,8395.0,8575.0,8937.0,9438.0,9494.0,10074.0,10538.0,11286.0,12058.0,12898.0,13426.0,13853.0,14499.0,14707.0,14601.0,14814.0,15009.0,15352.0,15219.0,15098.0,15046.0,15113.0,15202.0,15325.0,14849.0,14474.0,14512.0,14648.0,14579.0,14516.0,15081.0,14348.0,14013.0,13820.0,13737.0,13957.0,13855.0,13962.0,13763.0,13818.0,13948.0,13594.0,13302.0,13093.0,12797.0,12813.0,12713.0,12646.0,12660.0,12692.0,12656.0,12471.0,12115.0,12124.0,12005.0,12298.0,12471.0,11950.0,11689.0,11760.0,11654.0,11751.0,11335.0,11279.0,11270.0,11136.0,10787.0,10404.0,10202.0,10349.0,10380.0,9702.0,9859.0,9460.0,9608.0,9599.0,9262.0,8990.0,9090.0,8717.0,8903.0,8610.0,8504.0,8526.0],"r":null,"name":"","fill":null,"mode":"lines","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":["1967-07-01","1967-08-01","1967-09-01","1967-10-01","1967-11-01","1967-12-01","1968-01-01","1968-02-01","1968-03-01","1968-04-01","1968-05-01","1968-06-01","1968-07-01","1968-08-01","1968-09-01","1968-10-01","1968-11-01","1968-12-01","1969-01-01","1969-02-01","1969-03-01","1969-04-01","1969-05-01","1969-06-01","1969-07-01","1969-08-01","1969-09-01","1969-10-01","1969-11-01","1969-12-01","1970-01-01","1970-02-01","1970-03-01","1970-04-01","1970-05-01","1970-06-01","1970-07-01","1970-08-01","1970-09-01","1970-10-01","1970-11-01","1970-12-01","1971-01-01","1971-02-01","1971-03-01","1971-04-01","1971-05-01","1971-06-01","1971-07-01","1971-08-01","1971-09-01","1971-10-01","1971-11-01","1971-12-01","1972-01-01","1972-02-01","1972-03-01","1972-04-01","1972-05-01","1972-06-01","1972-07-01","1972-08-01","1972-09-01","1972-10-01","1972-11-01","1972-12-01","1973-01-01","1973-02-01","1973-03-01","1973-04-01","1973-05-01","1973-06-01","1973-07-01","1973-08-01","1973-09-01","1973-10-01","1973-11-01","1973-12-01","1974-01-01","1974-02-01","1974-03-01","1974-04-01","1974-05-01","1974-06-01","1974-07-01","1974-08-01","1974-09-01","1974-10-01","1974-11-01","1974-12-01","1975-01-01","1975-02-01","1975-03-01","1975-04-01","1975-05-01","1975-06-01","1975-07-01","1975-08-01","1975-09-01","1975-10-01","1975-11-01","1975-12-01","1976-01-01","1976-02-01","1976-03-01","1976-04-01","1976-05-01","1976-06-01","1976-07-01","1976-08-01","1976-09-01","1976-10-01","1976-11-01","1976-12-01","1977-01-01","1977-02-01","1977-03-01","1977-04-01","1977-05-01","1977-06-01","1977-07-01","1977-08-01","1977-09-01","1977-10-01","1977-11-01","1977-12-01","1978-01-01","1978-02-01","1978-03-01","1978-04-01","1978-05-01","1978-06-01","1978-07-01","1978-08-01","1978-09-01","1978-10-01","1978-11-01","1978-12-01","1979-01-01","1979-02-01","1979-03-01","1979-04-01","1979-05-01","1979-06-01","1979-07-01","1979-08-01","1979-09-01","1979-10-01","1979-11-01","1979-12-01","1980-01-01","1980-02-01","1980-03-01","1980-04-01","1980-05-01","1980-06-01","1980-07-01","1980-08-01","1980-09-01","1980-10-01","1980-11-01","1980-12-01","1981-01-01","1981-02-01","1981-03-01","1981-04-01","1981-05-01","1981-06-01","1981-07-01","1981-08-01","1981-09-01","1981-10-01","1981-11-01","1981-12-01","1982-01-01","1982-02-01","1982-03-01","1982-04-01","1982-05-01","1982-06-01","1982-07-01","1982-08-01","1982-09-01","1982-10-01","1982-11-01","1982-12-01","1983-01-01","1983-02-01","1983-03-01","1983-04-01","1983-05-01","1983-06-01","1983-07-01","1983-08-01","1983-09-01","1983-10-01","1983-11-01","1983-12-01","1984-01-01","1984-02-01","1984-03-01","1984-04-01","1984-05-01","1984-06-01","1984-07-01","1984-08-01","1984-09-01","1984-10-01","1984-11-01","1984-12-01","1985-01-01","1985-02-01","1985-03-01","1985-04-01","1985-05-01","1985-06-01","1985-07-01","1985-08-01","1985-09-01","1985-10-01","1985-11-01","1985-12-01","1986-01-01","1986-02-01","1986-03-01","1986-04-01","1986-05-01","1986-06-01","1986-07-01","1986-08-01","1986-09-01","1986-10-01","1986-11-01","1986-12-01","1987-01-01","1987-02-01","1987-03-01","1987-04-01","1987-05-01","1987-06-01","1987-07-01","1987-08-01","1987-09-01","1987-10-01","1987-11-01","1987-12-01","1988-01-01","1988-02-01","1988-03-01","1988-04-01","1988-05-01","1988-06-01","1988-07-01","1988-08-01","1988-09-01","1988-10-01","1988-11-01","1988-12-01","1989-01-01","1989-02-01","1989-03-01","1989-04-01","1989-05-01","1989-06-01","1989-07-01","1989-08-01","1989-09-01","1989-10-01","1989-11-01","1989-12-01","1990-01-01","1990-02-01","1990-03-01","1990-04-01","1990-05-01","1990-06-01","1990-07-01","1990-08-01","1990-09-01","1990-10-01","1990-11-01","1990-12-01","1991-01-01","1991-02-01","1991-03-01","1991-04-01","1991-05-01","1991-06-01","1991-07-01","1991-08-01","1991-09-01","1991-10-01","1991-11-01","1991-12-01","1992-01-01","1992-02-01","1992-03-01","1992-04-01","1992-05-01","1992-06-01","1992-07-01","1992-08-01","1992-09-01","1992-10-01","1992-11-01","1992-12-01","1993-01-01","1993-02-01","1993-03-01","1993-04-01","1993-05-01","1993-06-01","1993-07-01","1993-08-01","1993-09-01","1993-10-01","1993-11-01","1993-12-01","1994-01-01","1994-02-01","1994-03-01","1994-04-01","1994-05-01","1994-06-01","1994-07-01","1994-08-01","1994-09-01","1994-10-01","1994-11-01","1994-12-01","1995-01-01","1995-02-01","1995-03-01","1995-04-01","1995-05-01","1995-06-01","1995-07-01","1995-08-01","1995-09-01","1995-10-01","1995-11-01","1995-12-01","1996-01-01","1996-02-01","1996-03-01","1996-04-01","1996-05-01","1996-06-01","1996-07-01","1996-08-01","1996-09-01","1996-10-01","1996-11-01","1996-12-01","1997-01-01","1997-02-01","1997-03-01","1997-04-01","1997-05-01","1997-06-01","1997-07-01","1997-08-01","1997-09-01","1997-10-01","1997-11-01","1997-12-01","1998-01-01","1998-02-01","1998-03-01","1998-04-01","1998-05-01","1998-06-01","1998-07-01","1998-08-01","1998-09-01","1998-10-01","1998-11-01","1998-12-01","1999-01-01","1999-02-01","1999-03-01","1999-04-01","1999-05-01","1999-06-01","1999-07-01","1999-08-01","1999-09-01","1999-10-01","1999-11-01","1999-12-01","2000-01-01","2000-02-01","2000-03-01","2000-04-01","2000-05-01","2000-06-01","2000-07-01","2000-08-01","2000-09-01","2000-10-01","2000-11-01","2000-12-01","2001-01-01","2001-02-01","2001-03-01","2001-04-01","2001-05-01","2001-06-01","2001-07-01","2001-08-01","2001-09-01","2001-10-01","2001-11-01","2001-12-01","2002-01-01","2002-02-01","2002-03-01","2002-04-01","2002-05-01","2002-06-01","2002-07-01","2002-08-01","2002-09-01","2002-10-01","2002-11-01","2002-12-01","2003-01-01","2003-02-01","2003-03-01","2003-04-01","2003-05-01","2003-06-01","2003-07-01","2003-08-01","2003-09-01","2003-10-01","2003-11-01","2003-12-01","2004-01-01","2004-02-01","2004-03-01","2004-04-01","2004-05-01","2004-06-01","2004-07-01","2004-08-01","2004-09-01","2004-10-01","2004-11-01","2004-12-01","2005-01-01","2005-02-01","2005-03-01","2005-04-01","2005-05-01","2005-06-01","2005-07-01","2005-08-01","2005-09-01","2005-10-01","2005-11-01","2005-12-01","2006-01-01","2006-02-01","2006-03-01","2006-04-01","2006-05-01","2006-06-01","2006-07-01","2006-08-01","2006-09-01","2006-10-01","2006-11-01","2006-12-01","2007-01-01","2007-02-01","2007-03-01","2007-04-01","2007-05-01","2007-06-01","2007-07-01","2007-08-01","2007-09-01","2007-10-01","2007-11-01","2007-12-01","2008-01-01","2008-02-01","2008-03-01","2008-04-01","2008-05-01","2008-06-01","2008-07-01","2008-08-01","2008-09-01","2008-10-01","2008-11-01","2008-12-01","2009-01-01","2009-02-01","2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01","2009-08-01","2009-09-01","2009-10-01","2009-11-01","2009-12-01","2010-01-01","2010-02-01","2010-03-01","2010-04-01","2010-05-01","2010-06-01","2010-07-01","2010-08-01","2010-09-01","2010-10-01","2010-11-01","2010-12-01","2011-01-01","2011-02-01","2011-03-01","2011-04-01","2011-05-01","2011-06-01","2011-07-01","2011-08-01","2011-09-01","2011-10-01","2011-11-01","2011-12-01","2012-01-01","2012-02-01","2012-03-01","2012-04-01","2012-05-01","2012-06-01","2012-07-01","2012-08-01","2012-09-01","2012-10-01","2012-11-01","2012-12-01","2013-01-01","2013-02-01","2013-03-01","2013-04-01","2013-05-01","2013-06-01","2013-07-01","2013-08-01","2013-09-01","2013-10-01","2013-11-01","2013-12-01","2014-01-01","2014-02-01","2014-03-01","2014-04-01","2014-05-01","2014-06-01","2014-07-01","2014-08-01","2014-09-01","2014-10-01","2014-11-01","2014-12-01","2015-01-01","2015-02-01","2015-03-01","2015-04-01"],"text":null}], {"xaxis":{"type":"date"},"title":"US Unemployment Over Time"}, {});</script></div>
```


@claude please adapt the Plotly layout to support a few
time ranges: last year, last decade, and whole period.


::: {.sourceClojure}
```clojure
(-> unemploy-data
    (plotly/base {:=layout {:xaxis {:type "date"
                                    :rangeselector {:buttons [
                                                              {:count 1 :label "1Y" :step "year" :stepmode "backward"}
                                                              {:count 10 :label "10Y" :step "year" :stepmode "backward"}
                                                              {:step "all" :label "All"}]}}
                            :title "US Unemployment Over Time with Range Selector"}})
    (plotly/layer-line {:=x :date :=y :value})
    (plotly/plot))
```
:::



```{=html}
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2944.0,2945.0,2958.0,3143.0,3066.0,3018.0,2878.0,3001.0,2877.0,2709.0,2740.0,2938.0,2883.0,2768.0,2686.0,2689.0,2715.0,2685.0,2718.0,2692.0,2712.0,2758.0,2713.0,2816.0,2868.0,2856.0,3040.0,3049.0,2856.0,2884.0,3201.0,3453.0,3635.0,3797.0,3919.0,4071.0,4175.0,4256.0,4456.0,4591.0,4898.0,5076.0,4986.0,4903.0,4987.0,4959.0,4996.0,4949.0,5035.0,5134.0,5042.0,4954.0,5161.0,5154.0,5019.0,4928.0,5038.0,4959.0,4922.0,4923.0,4913.0,4939.0,4849.0,4875.0,4602.0,4543.0,4326.0,4452.0,4394.0,4459.0,4329.0,4363.0,4305.0,4305.0,4350.0,4144.0,4396.0,4489.0,4644.0,4731.0,4634.0,4618.0,4705.0,4927.0,5063.0,5022.0,5437.0,5523.0,6140.0,6636.0,7501.0,7520.0,7978.0,8210.0,8433.0,8220.0,8127.0,7928.0,7923.0,7897.0,7794.0,7744.0,7534.0,7326.0,7230.0,7330.0,7053.0,7322.0,7490.0,7518.0,7380.0,7430.0,7620.0,7545.0,7280.0,7443.0,7307.0,7059.0,6911.0,7134.0,6829.0,6925.0,6751.0,6763.0,6815.0,6386.0,6489.0,6318.0,6337.0,6180.0,6127.0,6028.0,6309.0,6080.0,6125.0,5947.0,6077.0,6228.0,6109.0,6173.0,6109.0,6069.0,5840.0,5959.0,5996.0,6320.0,6190.0,6296.0,6238.0,6325.0,6683.0,6702.0,6729.0,7358.0,7984.0,8098.0,8363.0,8281.0,8021.0,8088.0,8023.0,7718.0,8071.0,8051.0,7982.0,7869.0,8174.0,8098.0,7863.0,8036.0,8230.0,8646.0,9029.0,9267.0,9397.0,9705.0,9895.0,10244.0,10335.0,10538.0,10849.0,10881.0,11217.0,11529.0,11938.0,12051.0,11534.0,11545.0,11408.0,11268.0,11154.0,11246.0,10548.0,10623.0,10282.0,9887.0,9499.0,9331.0,9008.0,8791.0,8746.0,8762.0,8456.0,8226.0,8537.0,8519.0,8367.0,8381.0,8198.0,8358.0,8423.0,8321.0,8339.0,8395.0,8302.0,8460.0,8513.0,8196.0,8248.0,8298.0,8128.0,8138.0,7795.0,8402.0,8383.0,8364.0,8439.0,8508.0,8319.0,8135.0,8310.0,8243.0,8159.0,7883.0,7892.0,7865.0,7862.0,7542.0,7574.0,7398.0,7268.0,7261.0,7102.0,7227.0,7035.0,6936.0,6953.0,6929.0,6876.0,6601.0,6779.0,6546.0,6605.0,6843.0,6604.0,6568.0,6537.0,6518.0,6682.0,6359.0,6205.0,6468.0,6375.0,6577.0,6495.0,6511.0,6590.0,6630.0,6725.0,6667.0,6752.0,6651.0,6598.0,6797.0,6742.0,6590.0,6922.0,7188.0,7368.0,7459.0,7764.0,7901.0,8015.0,8265.0,8586.0,8439.0,8736.0,8692.0,8586.0,8666.0,8722.0,8842.0,8931.0,9198.0,9283.0,9454.0,9460.0,9415.0,9744.0,10040.0,9850.0,9787.0,9781.0,9398.0,9565.0,9557.0,9325.0,9183.0,9056.0,9110.0,9149.0,9121.0,8930.0,8763.0,8714.0,8750.0,8542.0,8477.0,8630.0,8583.0,8470.0,8331.0,7915.0,7927.0,7946.0,7933.0,7734.0,7632.0,7375.0,7230.0,7375.0,7187.0,7153.0,7645.0,7430.0,7427.0,7527.0,7484.0,7478.0,7328.0,7426.0,7423.0,7491.0,7313.0,7318.0,7415.0,7423.0,7095.0,7337.0,6882.0,6979.0,7031.0,7236.0,7253.0,7158.0,7102.0,7000.0,6873.0,6655.0,6799.0,6655.0,6608.0,6656.0,6454.0,6308.0,6476.0,6368.0,6306.0,6422.0,5941.0,6047.0,6212.0,6259.0,6179.0,6300.0,6280.0,6100.0,6032.0,5976.0,6111.0,5783.0,6004.0,5796.0,5951.0,6025.0,5838.0,5915.0,5778.0,5716.0,5653.0,5708.0,5858.0,5733.0,5481.0,5758.0,5651.0,5747.0,5853.0,5625.0,5534.0,5639.0,5634.0,6023.0,6089.0,6141.0,6271.0,6226.0,6484.0,6583.0,7042.0,7142.0,7694.0,8003.0,8258.0,8182.0,8215.0,8304.0,8599.0,8399.0,8393.0,8390.0,8304.0,8251.0,8307.0,8520.0,8640.0,8520.0,8618.0,8588.0,8842.0,8957.0,9266.0,9011.0,8896.0,8921.0,8732.0,8576.0,8317.0,8370.0,8167.0,8491.0,8170.0,8212.0,8286.0,8136.0,7990.0,7927.0,8061.0,7932.0,7934.0,7784.0,7980.0,7737.0,7672.0,7651.0,7524.0,7406.0,7345.0,7553.0,7453.0,7566.0,7279.0,7064.0,7184.0,7072.0,7120.0,6980.0,7001.0,7175.0,7091.0,6847.0,6727.0,6872.0,6762.0,7116.0,6927.0,6731.0,6850.0,6766.0,6979.0,7149.0,7067.0,7170.0,7237.0,7240.0,7645.0,7685.0,7497.0,7822.0,7637.0,8395.0,8575.0,8937.0,9438.0,9494.0,10074.0,10538.0,11286.0,12058.0,12898.0,13426.0,13853.0,14499.0,14707.0,14601.0,14814.0,15009.0,15352.0,15219.0,15098.0,15046.0,15113.0,15202.0,15325.0,14849.0,14474.0,14512.0,14648.0,14579.0,14516.0,15081.0,14348.0,14013.0,13820.0,13737.0,13957.0,13855.0,13962.0,13763.0,13818.0,13948.0,13594.0,13302.0,13093.0,12797.0,12813.0,12713.0,12646.0,12660.0,12692.0,12656.0,12471.0,12115.0,12124.0,12005.0,12298.0,12471.0,11950.0,11689.0,11760.0,11654.0,11751.0,11335.0,11279.0,11270.0,11136.0,10787.0,10404.0,10202.0,10349.0,10380.0,9702.0,9859.0,9460.0,9608.0,9599.0,9262.0,8990.0,9090.0,8717.0,8903.0,8610.0,8504.0,8526.0],"r":null,"name":"","fill":null,"mode":"lines","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":["1967-07-01","1967-08-01","1967-09-01","1967-10-01","1967-11-01","1967-12-01","1968-01-01","1968-02-01","1968-03-01","1968-04-01","1968-05-01","1968-06-01","1968-07-01","1968-08-01","1968-09-01","1968-10-01","1968-11-01","1968-12-01","1969-01-01","1969-02-01","1969-03-01","1969-04-01","1969-05-01","1969-06-01","1969-07-01","1969-08-01","1969-09-01","1969-10-01","1969-11-01","1969-12-01","1970-01-01","1970-02-01","1970-03-01","1970-04-01","1970-05-01","1970-06-01","1970-07-01","1970-08-01","1970-09-01","1970-10-01","1970-11-01","1970-12-01","1971-01-01","1971-02-01","1971-03-01","1971-04-01","1971-05-01","1971-06-01","1971-07-01","1971-08-01","1971-09-01","1971-10-01","1971-11-01","1971-12-01","1972-01-01","1972-02-01","1972-03-01","1972-04-01","1972-05-01","1972-06-01","1972-07-01","1972-08-01","1972-09-01","1972-10-01","1972-11-01","1972-12-01","1973-01-01","1973-02-01","1973-03-01","1973-04-01","1973-05-01","1973-06-01","1973-07-01","1973-08-01","1973-09-01","1973-10-01","1973-11-01","1973-12-01","1974-01-01","1974-02-01","1974-03-01","1974-04-01","1974-05-01","1974-06-01","1974-07-01","1974-08-01","1974-09-01","1974-10-01","1974-11-01","1974-12-01","1975-01-01","1975-02-01","1975-03-01","1975-04-01","1975-05-01","1975-06-01","1975-07-01","1975-08-01","1975-09-01","1975-10-01","1975-11-01","1975-12-01","1976-01-01","1976-02-01","1976-03-01","1976-04-01","1976-05-01","1976-06-01","1976-07-01","1976-08-01","1976-09-01","1976-10-01","1976-11-01","1976-12-01","1977-01-01","1977-02-01","1977-03-01","1977-04-01","1977-05-01","1977-06-01","1977-07-01","1977-08-01","1977-09-01","1977-10-01","1977-11-01","1977-12-01","1978-01-01","1978-02-01","1978-03-01","1978-04-01","1978-05-01","1978-06-01","1978-07-01","1978-08-01","1978-09-01","1978-10-01","1978-11-01","1978-12-01","1979-01-01","1979-02-01","1979-03-01","1979-04-01","1979-05-01","1979-06-01","1979-07-01","1979-08-01","1979-09-01","1979-10-01","1979-11-01","1979-12-01","1980-01-01","1980-02-01","1980-03-01","1980-04-01","1980-05-01","1980-06-01","1980-07-01","1980-08-01","1980-09-01","1980-10-01","1980-11-01","1980-12-01","1981-01-01","1981-02-01","1981-03-01","1981-04-01","1981-05-01","1981-06-01","1981-07-01","1981-08-01","1981-09-01","1981-10-01","1981-11-01","1981-12-01","1982-01-01","1982-02-01","1982-03-01","1982-04-01","1982-05-01","1982-06-01","1982-07-01","1982-08-01","1982-09-01","1982-10-01","1982-11-01","1982-12-01","1983-01-01","1983-02-01","1983-03-01","1983-04-01","1983-05-01","1983-06-01","1983-07-01","1983-08-01","1983-09-01","1983-10-01","1983-11-01","1983-12-01","1984-01-01","1984-02-01","1984-03-01","1984-04-01","1984-05-01","1984-06-01","1984-07-01","1984-08-01","1984-09-01","1984-10-01","1984-11-01","1984-12-01","1985-01-01","1985-02-01","1985-03-01","1985-04-01","1985-05-01","1985-06-01","1985-07-01","1985-08-01","1985-09-01","1985-10-01","1985-11-01","1985-12-01","1986-01-01","1986-02-01","1986-03-01","1986-04-01","1986-05-01","1986-06-01","1986-07-01","1986-08-01","1986-09-01","1986-10-01","1986-11-01","1986-12-01","1987-01-01","1987-02-01","1987-03-01","1987-04-01","1987-05-01","1987-06-01","1987-07-01","1987-08-01","1987-09-01","1987-10-01","1987-11-01","1987-12-01","1988-01-01","1988-02-01","1988-03-01","1988-04-01","1988-05-01","1988-06-01","1988-07-01","1988-08-01","1988-09-01","1988-10-01","1988-11-01","1988-12-01","1989-01-01","1989-02-01","1989-03-01","1989-04-01","1989-05-01","1989-06-01","1989-07-01","1989-08-01","1989-09-01","1989-10-01","1989-11-01","1989-12-01","1990-01-01","1990-02-01","1990-03-01","1990-04-01","1990-05-01","1990-06-01","1990-07-01","1990-08-01","1990-09-01","1990-10-01","1990-11-01","1990-12-01","1991-01-01","1991-02-01","1991-03-01","1991-04-01","1991-05-01","1991-06-01","1991-07-01","1991-08-01","1991-09-01","1991-10-01","1991-11-01","1991-12-01","1992-01-01","1992-02-01","1992-03-01","1992-04-01","1992-05-01","1992-06-01","1992-07-01","1992-08-01","1992-09-01","1992-10-01","1992-11-01","1992-12-01","1993-01-01","1993-02-01","1993-03-01","1993-04-01","1993-05-01","1993-06-01","1993-07-01","1993-08-01","1993-09-01","1993-10-01","1993-11-01","1993-12-01","1994-01-01","1994-02-01","1994-03-01","1994-04-01","1994-05-01","1994-06-01","1994-07-01","1994-08-01","1994-09-01","1994-10-01","1994-11-01","1994-12-01","1995-01-01","1995-02-01","1995-03-01","1995-04-01","1995-05-01","1995-06-01","1995-07-01","1995-08-01","1995-09-01","1995-10-01","1995-11-01","1995-12-01","1996-01-01","1996-02-01","1996-03-01","1996-04-01","1996-05-01","1996-06-01","1996-07-01","1996-08-01","1996-09-01","1996-10-01","1996-11-01","1996-12-01","1997-01-01","1997-02-01","1997-03-01","1997-04-01","1997-05-01","1997-06-01","1997-07-01","1997-08-01","1997-09-01","1997-10-01","1997-11-01","1997-12-01","1998-01-01","1998-02-01","1998-03-01","1998-04-01","1998-05-01","1998-06-01","1998-07-01","1998-08-01","1998-09-01","1998-10-01","1998-11-01","1998-12-01","1999-01-01","1999-02-01","1999-03-01","1999-04-01","1999-05-01","1999-06-01","1999-07-01","1999-08-01","1999-09-01","1999-10-01","1999-11-01","1999-12-01","2000-01-01","2000-02-01","2000-03-01","2000-04-01","2000-05-01","2000-06-01","2000-07-01","2000-08-01","2000-09-01","2000-10-01","2000-11-01","2000-12-01","2001-01-01","2001-02-01","2001-03-01","2001-04-01","2001-05-01","2001-06-01","2001-07-01","2001-08-01","2001-09-01","2001-10-01","2001-11-01","2001-12-01","2002-01-01","2002-02-01","2002-03-01","2002-04-01","2002-05-01","2002-06-01","2002-07-01","2002-08-01","2002-09-01","2002-10-01","2002-11-01","2002-12-01","2003-01-01","2003-02-01","2003-03-01","2003-04-01","2003-05-01","2003-06-01","2003-07-01","2003-08-01","2003-09-01","2003-10-01","2003-11-01","2003-12-01","2004-01-01","2004-02-01","2004-03-01","2004-04-01","2004-05-01","2004-06-01","2004-07-01","2004-08-01","2004-09-01","2004-10-01","2004-11-01","2004-12-01","2005-01-01","2005-02-01","2005-03-01","2005-04-01","2005-05-01","2005-06-01","2005-07-01","2005-08-01","2005-09-01","2005-10-01","2005-11-01","2005-12-01","2006-01-01","2006-02-01","2006-03-01","2006-04-01","2006-05-01","2006-06-01","2006-07-01","2006-08-01","2006-09-01","2006-10-01","2006-11-01","2006-12-01","2007-01-01","2007-02-01","2007-03-01","2007-04-01","2007-05-01","2007-06-01","2007-07-01","2007-08-01","2007-09-01","2007-10-01","2007-11-01","2007-12-01","2008-01-01","2008-02-01","2008-03-01","2008-04-01","2008-05-01","2008-06-01","2008-07-01","2008-08-01","2008-09-01","2008-10-01","2008-11-01","2008-12-01","2009-01-01","2009-02-01","2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01","2009-08-01","2009-09-01","2009-10-01","2009-11-01","2009-12-01","2010-01-01","2010-02-01","2010-03-01","2010-04-01","2010-05-01","2010-06-01","2010-07-01","2010-08-01","2010-09-01","2010-10-01","2010-11-01","2010-12-01","2011-01-01","2011-02-01","2011-03-01","2011-04-01","2011-05-01","2011-06-01","2011-07-01","2011-08-01","2011-09-01","2011-10-01","2011-11-01","2011-12-01","2012-01-01","2012-02-01","2012-03-01","2012-04-01","2012-05-01","2012-06-01","2012-07-01","2012-08-01","2012-09-01","2012-10-01","2012-11-01","2012-12-01","2013-01-01","2013-02-01","2013-03-01","2013-04-01","2013-05-01","2013-06-01","2013-07-01","2013-08-01","2013-09-01","2013-10-01","2013-11-01","2013-12-01","2014-01-01","2014-02-01","2014-03-01","2014-04-01","2014-05-01","2014-06-01","2014-07-01","2014-08-01","2014-09-01","2014-10-01","2014-11-01","2014-12-01","2015-01-01","2015-02-01","2015-03-01","2015-04-01"],"text":null}], {"xaxis":{"type":"date","rangeselector":{"buttons":[{"count":1,"label":"1Y","step":"year","stepmode":"backward"},{"count":10,"label":"10Y","step":"year","stepmode":"backward"},{"step":"all","label":"All"}]}},"title":"US Unemployment Over Time with Range Selector"}, {});</script></div>
```


@claude for the whole-period series, please add a running index number
and a regression line of the unemployment rate by this number.
Do the whole thing in one `->` pipeline.


::: {.sourceClojure}
```clojure
(-> unemploy-data
    (tc/add-column :index (range (tc/row-count unemploy-data)))
    (plotly/base {:=layout {:xaxis {:title "Time Index"}
                           :yaxis {:title "Unemployment Rate"}
                           :title "Unemployment Rate vs Time Index with Regression"}})
    (plotly/layer-point {:=x :index :=y :value :=name "Unemployment"})
    (plotly/layer-smooth {:=x :index :=y :value :=name "Linear Trend"})
    (plotly/plot))
```
:::



```{=html}
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2944.0,2945.0,2958.0,3143.0,3066.0,3018.0,2878.0,3001.0,2877.0,2709.0,2740.0,2938.0,2883.0,2768.0,2686.0,2689.0,2715.0,2685.0,2718.0,2692.0,2712.0,2758.0,2713.0,2816.0,2868.0,2856.0,3040.0,3049.0,2856.0,2884.0,3201.0,3453.0,3635.0,3797.0,3919.0,4071.0,4175.0,4256.0,4456.0,4591.0,4898.0,5076.0,4986.0,4903.0,4987.0,4959.0,4996.0,4949.0,5035.0,5134.0,5042.0,4954.0,5161.0,5154.0,5019.0,4928.0,5038.0,4959.0,4922.0,4923.0,4913.0,4939.0,4849.0,4875.0,4602.0,4543.0,4326.0,4452.0,4394.0,4459.0,4329.0,4363.0,4305.0,4305.0,4350.0,4144.0,4396.0,4489.0,4644.0,4731.0,4634.0,4618.0,4705.0,4927.0,5063.0,5022.0,5437.0,5523.0,6140.0,6636.0,7501.0,7520.0,7978.0,8210.0,8433.0,8220.0,8127.0,7928.0,7923.0,7897.0,7794.0,7744.0,7534.0,7326.0,7230.0,7330.0,7053.0,7322.0,7490.0,7518.0,7380.0,7430.0,7620.0,7545.0,7280.0,7443.0,7307.0,7059.0,6911.0,7134.0,6829.0,6925.0,6751.0,6763.0,6815.0,6386.0,6489.0,6318.0,6337.0,6180.0,6127.0,6028.0,6309.0,6080.0,6125.0,5947.0,6077.0,6228.0,6109.0,6173.0,6109.0,6069.0,5840.0,5959.0,5996.0,6320.0,6190.0,6296.0,6238.0,6325.0,6683.0,6702.0,6729.0,7358.0,7984.0,8098.0,8363.0,8281.0,8021.0,8088.0,8023.0,7718.0,8071.0,8051.0,7982.0,7869.0,8174.0,8098.0,7863.0,8036.0,8230.0,8646.0,9029.0,9267.0,9397.0,9705.0,9895.0,10244.0,10335.0,10538.0,10849.0,10881.0,11217.0,11529.0,11938.0,12051.0,11534.0,11545.0,11408.0,11268.0,11154.0,11246.0,10548.0,10623.0,10282.0,9887.0,9499.0,9331.0,9008.0,8791.0,8746.0,8762.0,8456.0,8226.0,8537.0,8519.0,8367.0,8381.0,8198.0,8358.0,8423.0,8321.0,8339.0,8395.0,8302.0,8460.0,8513.0,8196.0,8248.0,8298.0,8128.0,8138.0,7795.0,8402.0,8383.0,8364.0,8439.0,8508.0,8319.0,8135.0,8310.0,8243.0,8159.0,7883.0,7892.0,7865.0,7862.0,7542.0,7574.0,7398.0,7268.0,7261.0,7102.0,7227.0,7035.0,6936.0,6953.0,6929.0,6876.0,6601.0,6779.0,6546.0,6605.0,6843.0,6604.0,6568.0,6537.0,6518.0,6682.0,6359.0,6205.0,6468.0,6375.0,6577.0,6495.0,6511.0,6590.0,6630.0,6725.0,6667.0,6752.0,6651.0,6598.0,6797.0,6742.0,6590.0,6922.0,7188.0,7368.0,7459.0,7764.0,7901.0,8015.0,8265.0,8586.0,8439.0,8736.0,8692.0,8586.0,8666.0,8722.0,8842.0,8931.0,9198.0,9283.0,9454.0,9460.0,9415.0,9744.0,10040.0,9850.0,9787.0,9781.0,9398.0,9565.0,9557.0,9325.0,9183.0,9056.0,9110.0,9149.0,9121.0,8930.0,8763.0,8714.0,8750.0,8542.0,8477.0,8630.0,8583.0,8470.0,8331.0,7915.0,7927.0,7946.0,7933.0,7734.0,7632.0,7375.0,7230.0,7375.0,7187.0,7153.0,7645.0,7430.0,7427.0,7527.0,7484.0,7478.0,7328.0,7426.0,7423.0,7491.0,7313.0,7318.0,7415.0,7423.0,7095.0,7337.0,6882.0,6979.0,7031.0,7236.0,7253.0,7158.0,7102.0,7000.0,6873.0,6655.0,6799.0,6655.0,6608.0,6656.0,6454.0,6308.0,6476.0,6368.0,6306.0,6422.0,5941.0,6047.0,6212.0,6259.0,6179.0,6300.0,6280.0,6100.0,6032.0,5976.0,6111.0,5783.0,6004.0,5796.0,5951.0,6025.0,5838.0,5915.0,5778.0,5716.0,5653.0,5708.0,5858.0,5733.0,5481.0,5758.0,5651.0,5747.0,5853.0,5625.0,5534.0,5639.0,5634.0,6023.0,6089.0,6141.0,6271.0,6226.0,6484.0,6583.0,7042.0,7142.0,7694.0,8003.0,8258.0,8182.0,8215.0,8304.0,8599.0,8399.0,8393.0,8390.0,8304.0,8251.0,8307.0,8520.0,8640.0,8520.0,8618.0,8588.0,8842.0,8957.0,9266.0,9011.0,8896.0,8921.0,8732.0,8576.0,8317.0,8370.0,8167.0,8491.0,8170.0,8212.0,8286.0,8136.0,7990.0,7927.0,8061.0,7932.0,7934.0,7784.0,7980.0,7737.0,7672.0,7651.0,7524.0,7406.0,7345.0,7553.0,7453.0,7566.0,7279.0,7064.0,7184.0,7072.0,7120.0,6980.0,7001.0,7175.0,7091.0,6847.0,6727.0,6872.0,6762.0,7116.0,6927.0,6731.0,6850.0,6766.0,6979.0,7149.0,7067.0,7170.0,7237.0,7240.0,7645.0,7685.0,7497.0,7822.0,7637.0,8395.0,8575.0,8937.0,9438.0,9494.0,10074.0,10538.0,11286.0,12058.0,12898.0,13426.0,13853.0,14499.0,14707.0,14601.0,14814.0,15009.0,15352.0,15219.0,15098.0,15046.0,15113.0,15202.0,15325.0,14849.0,14474.0,14512.0,14648.0,14579.0,14516.0,15081.0,14348.0,14013.0,13820.0,13737.0,13957.0,13855.0,13962.0,13763.0,13818.0,13948.0,13594.0,13302.0,13093.0,12797.0,12813.0,12713.0,12646.0,12660.0,12692.0,12656.0,12471.0,12115.0,12124.0,12005.0,12298.0,12471.0,11950.0,11689.0,11760.0,11654.0,11751.0,11335.0,11279.0,11270.0,11136.0,10787.0,10404.0,10202.0,10349.0,10380.0,9702.0,9859.0,9460.0,9608.0,9599.0,9262.0,8990.0,9090.0,8717.0,8903.0,8610.0,8504.0,8526.0],"r":null,"name":"Unemployment","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573],"text":null},{"y":[4820.148032116348,4830.448772334195,4840.749512552043,4851.05025276989,4861.350992987737,4871.651733205585,4881.952473423432,4892.253213641279,4902.553953859127,4912.854694076975,4923.155434294822,4933.456174512669,4943.756914730517,4954.057654948364,4964.358395166211,4974.659135384059,4984.959875601906,4995.260615819753,5005.5613560376005,5015.862096255448,5026.162836473295,5036.463576691142,5046.76431690899,5057.065057126837,5067.365797344684,5077.6665375625325,5087.96727778038,5098.268017998227,5108.5687582160745,5118.869498433922,5129.170238651769,5139.470978869616,5149.771719087464,5160.072459305311,5170.373199523158,5180.673939741006,5190.974679958853,5201.2754201767,5211.5761603945475,5221.876900612395,5232.177640830243,5242.47838104809,5252.779121265938,5263.079861483785,5273.380601701632,5283.68134191948,5293.982082137327,5304.282822355174,5314.5835625730215,5324.884302790869,5335.185043008716,5345.485783226563,5355.786523444411,5366.087263662258,5376.388003880105,5386.6887440979535,5396.9894843158,5407.290224533648,5417.590964751495,5427.891704969343,5438.19244518719,5448.493185405037,5458.793925622885,5469.094665840732,5479.395406058579,5489.696146276427,5499.996886494274,5510.297626712121,5520.5983669299685,5530.899107147816,5541.199847365663,5551.50058758351,5561.801327801359,5572.102068019205,5582.402808237053,5592.703548454901,5603.004288672748,5613.305028890595,5623.6057691084425,5633.90650932629,5644.207249544137,5654.507989761984,5664.808729979832,5675.109470197679,5685.410210415526,5695.710950633374,5706.011690851221,5716.312431069069,5726.6131712869155,5736.913911504764,5747.214651722611,5757.515391940458,5767.816132158306,5778.116872376153,5788.417612594,5798.718352811848,5809.019093029695,5819.319833247542,5829.6205734653895,5839.921313683237,5850.222053901084,5860.522794118931,5870.82353433678,5881.124274554626,5891.425014772474,5901.725754990321,5912.026495208169,5922.327235426016,5932.6279756438635,5942.928715861711,5953.229456079558,5963.530196297405,5973.830936515253,5984.1316767331,5994.432416950947,6004.733157168795,6015.033897386642,6025.334637604489,6035.6353778223365,6045.936118040185,6056.236858258031,6066.537598475879,6076.838338693726,6087.139078911574,6097.439819129421,6107.740559347269,6118.041299565116,6128.342039782963,6138.6427800008105,6148.943520218658,6159.244260436505,6169.545000654352,6179.8457408722,6190.146481090047,6200.447221307895,6210.747961525742,6221.04870174359,6231.349441961436,6241.6501821792845,6251.950922397132,6262.251662614979,6272.552402832826,6282.853143050674,6293.153883268521,6303.454623486368,6313.755363704216,6324.056103922063,6334.35684413991,6344.6575843577575,6354.958324575605,6365.259064793452,6375.5598050113,6385.860545229147,6396.161285446995,6406.462025664841,6416.76276588269,6427.063506100537,6437.364246318384,6447.6649865362315,6457.965726754079,6468.266466971926,6478.567207189773,6488.867947407621,6499.168687625468,6509.469427843315,6519.770168061163,6530.070908279011,6540.371648496857,6550.672388714705,6560.973128932552,6571.2738691504,6581.574609368247,6591.875349586095,6602.176089803942,6612.476830021789,6622.777570239637,6633.078310457484,6643.379050675331,6653.6797908931785,6663.980531111026,6674.281271328873,6684.58201154672,6694.882751764568,6705.183491982416,6715.484232200262,6725.784972418111,6736.085712635957,6746.386452853805,6756.6871930716525,6766.9879332895,6777.288673507347,6787.589413725194,6797.890153943042,6808.190894160889,6818.491634378736,6828.792374596584,6839.093114814431,6849.393855032278,6859.694595250126,6869.995335467973,6880.296075685821,6890.596815903667,6900.897556121516,6911.198296339362,6921.49903655721,6931.799776775058,6942.100516992905,6952.401257210752,6962.7019974285995,6973.002737646447,6983.303477864294,6993.604218082141,7003.904958299989,7014.205698517837,7024.506438735683,7034.807178953532,7045.107919171378,7055.408659389226,7065.709399607073,7076.010139824921,7086.310880042768,7096.611620260615,7106.912360478463,7117.21310069631,7127.513840914157,7137.814581132005,7148.115321349852,7158.416061567699,7168.7168017855465,7179.017542003394,7189.318282221242,7199.619022439088,7209.919762656937,7220.220502874783,7230.521243092631,7240.821983310478,7251.122723528326,7261.423463746173,7271.7242039640205,7282.024944181868,7292.325684399715,7302.626424617562,7312.92716483541,7323.227905053257,7333.528645271104,7343.8293854889525,7354.130125706799,7364.430865924647,7374.731606142494,7385.032346360342,7395.333086578188,7405.633826796036,7415.934567013884,7426.235307231731,7436.536047449578,7446.836787667426,7457.137527885273,7467.43826810312,7477.7390083209675,7488.039748538815,7498.340488756662,7508.641228974509,7518.941969192358,7529.242709410204,7539.543449628052,7549.844189845899,7560.144930063747,7570.445670281593,7580.7464104994415,7591.047150717289,7601.347890935136,7611.648631152983,7621.949371370831,7632.250111588678,7642.550851806525,7652.851592024373,7663.15233224222,7673.453072460068,7683.7538126779145,7694.054552895763,7704.355293113609,7714.656033331457,7724.956773549304,7735.257513767152,7745.558253984999,7755.858994202847,7766.159734420694,7776.460474638541,7786.7612148563885,7797.061955074236,7807.362695292083,7817.66343550993,7827.964175727778,7838.264915945625,7848.565656163473,7858.86639638132,7869.167136599168,7879.467876817014,7889.7686170348625,7900.069357252709,7910.370097470557,7920.670837688404,7930.971577906252,7941.272318124099,7951.573058341946,7961.873798559794,7972.174538777641,7982.475278995488,7992.7760192133355,8003.076759431184,8013.37749964903,8023.678239866878,8033.978980084725,8044.279720302573,8054.580460520419,8064.881200738268,8075.181940956115,8085.482681173962,8095.7834213918095,8106.084161609657,8116.384901827504,8126.685642045351,8136.986382263199,8147.287122481046,8157.587862698893,8167.888602916741,8178.189343134589,8188.490083352435,8198.790823570283,8209.09156378813,8219.392304005978,8229.693044223824,8239.993784441673,8250.294524659519,8260.595264877367,8270.896005095216,8281.196745313062,8291.497485530908,8301.798225748757,8312.098965966605,8322.399706184451,8332.7004464023,8343.001186620146,8353.301926837994,8363.60266705584,8373.903407273689,8384.204147491535,8394.504887709383,8404.805627927231,8415.106368145078,8425.407108362924,8435.707848580772,8446.00858879862,8456.309329016467,8466.610069234313,8476.910809452162,8487.21154967001,8497.512289887856,8507.813030105704,8518.11377032355,8528.414510541399,8538.715250759245,8549.015990977094,8559.31673119494,8569.617471412788,8579.918211630637,8590.218951848483,8600.51969206633,8610.820432284178,8621.121172502026,8631.421912719872,8641.722652937719,8652.023393155567,8662.324133373415,8672.624873591261,8682.92561380911,8693.226354026956,8703.527094244804,8713.82783446265,8724.128574680499,8734.429314898345,8744.730055116193,8755.030795334042,8765.331535551888,8775.632275769734,8785.933015987583,8796.23375620543,8806.534496423277,8816.835236641124,8827.135976858972,8837.43671707682,8847.737457294666,8858.038197512515,8868.338937730361,8878.63967794821,8888.940418166056,8899.241158383904,8909.54189860175,8919.842638819599,8930.143379037447,8940.444119255293,8950.74485947314,8961.045599690988,8971.346339908836,8981.647080126682,8991.947820344529,9002.248560562377,9012.549300780225,9022.850040998073,9033.15078121592,9043.451521433766,9053.752261651614,9064.053001869463,9074.353742087309,9084.654482305155,9094.955222523004,9105.255962740852,9115.556702958698,9125.857443176545,9136.158183394393,9146.458923612241,9156.759663830087,9167.060404047934,9177.361144265782,9187.66188448363,9197.962624701478,9208.263364919325,9218.564105137171,9228.86484535502,9239.165585572868,9249.466325790714,9259.76706600856,9270.067806226409,9280.368546444257,9290.669286662103,9300.97002687995,9311.270767097798,9321.571507315646,9331.872247533493,9342.172987751339,9352.473727969187,9362.774468187035,9373.075208404884,9383.37594862273,9393.676688840576,9403.977429058425,9414.278169276273,9424.57890949412,9434.879649711966,9445.180389929814,9455.481130147662,9465.781870365508,9476.082610583355,9486.383350801203,9496.684091019051,9506.984831236898,9517.285571454744,9527.586311672592,9537.88705189044,9548.187792108289,9558.488532326135,9568.789272543981,9579.09001276183,9589.390752979678,9599.691493197524,9609.99223341537,9620.292973633219,9630.593713851067,9640.894454068914,9651.19519428676,9661.495934504608,9671.796674722456,9682.097414940305,9692.398155158151,9702.698895375997,9712.999635593846,9723.300375811694,9733.60111602954,9743.901856247387,9754.202596465235,9764.503336683083,9774.80407690093,9785.104817118776,9795.405557336624,9805.706297554472,9816.007037772319,9826.307777990165,9836.608518208013,9846.909258425861,9857.20999864371,9867.510738861556,9877.811479079402,9888.11221929725,9898.412959515099,9908.713699732945,9919.014439950792,9929.31518016864,9939.615920386488,9949.916660604335,9960.217400822181,9970.51814104003,9980.818881257877,9991.119621475724,10001.42036169357,10011.721101911418,10022.021842129267,10032.322582347115,10042.623322564961,10052.924062782808,10063.224803000656,10073.525543218504,10083.82628343635,10094.127023654197,10104.427763872045,10114.728504089893,10125.02924430774,10135.329984525586,10145.630724743434,10155.931464961282,10166.232205179129,10176.532945396975,10186.833685614823,10197.134425832672,10207.43516605052,10217.735906268366,10228.036646486213,10238.337386704061,10248.63812692191,10258.938867139756,10269.239607357602,10279.54034757545,10289.841087793298,10300.141828011145,10310.442568228991,10320.74330844684,10331.044048664688,10341.344788882536,10351.645529100382,10361.946269318229,10372.247009536077,10382.547749753925,10392.848489971771,10403.149230189618,10413.449970407466,10423.750710625314,10434.05145084316,10444.352191061007,10454.652931278855,10464.953671496703,10475.25441171455,10485.555151932396,10495.855892150244,10506.156632368093,10516.45737258594,10526.758112803787,10537.058853021634,10547.359593239482,10557.66033345733,10567.961073675177,10578.261813893023,10588.562554110871,10598.86329432872,10609.164034546566,10619.464774764412,10629.76551498226,10640.066255200109,10650.366995417955,10660.667735635801,10670.96847585365,10681.269216071498,10691.569956289346,10701.870696507192,10712.171436725039,10722.472176942887],"r":null,"name":"Linear Trend","fill":null,"mode":"lines","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573],"text":null}], {"xaxis":{"title":"Time Index"},"yaxis":{"title":"Unemployment Rate"},"title":"Unemployment Rate vs Time Index with Regression"}, {});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/prompts/blob/main/notebooks/explore.clj">notebooks/explore.clj</a></small></small></pre></div>
```
